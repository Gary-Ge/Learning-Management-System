package com.gogohd.ucenter.controller;

import com.gogohd.base.utils.R;
import com.gogohd.ucenter.entity.vo.*;
import com.gogohd.ucenter.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("ucenter")
@CrossOrigin
@Tag(name = "User Center")
public class UserController {

    @Autowired
    private UserService userService;

    @Operation(summary = "Register new users")
    @PostMapping("register")
    public R register(@RequestBody RegisterVo registerVo) {
        return R.success().message("Register success").data("token", userService.register(registerVo));
    }

    @Operation(summary = "Login for current users")
    @PostMapping("login")
    public R login(@RequestBody LoginVo loginVo) {
        return R.success().message("Login success").data("token", userService.login(loginVo));
    }

    @Operation(summary = "Get user information, including username, email address and avatar link")
    @GetMapping("user")
    public R getUser(HttpServletRequest request) {
        String userId = (String) request.getAttribute("userId");
        return R.success().message("Get user information success").data("user", userService.getUserById(userId));
    }

    @Operation(summary = "Update user information")
    @PutMapping("user")
    public R updateUser(HttpServletRequest request, @RequestBody UpdateVo updateVo) {
        String userId = (String) request.getAttribute("userId");
        userService.updateUserById(updateVo, userId);
        return R.success().message("Update user information success");
    }

    @Operation(summary = "Check if the given email address exists and send the verification code")
    @GetMapping("email/{email}")
    public R checkEmail(@PathVariable String email) {
        userService.checkEmailAddress(email);
        return R.success().message("Verification code has been sent to " + email);
    }

    @Operation(summary = "Verify if the code input by user is same as the code generated by system")
    @PostMapping("code")
    public R verifyCode(@RequestBody VerifyCodeVo verifyCodeVo) {
        userService.verifyCode(verifyCodeVo);
        return R.success().message("Verification code is correct");
    }

    @Operation(summary = "Update only the password for users, for resetting their password")
    @PutMapping("password")
    public R updatePassword(@RequestBody UpdatePasswordVo updatePasswordVo) {
        userService.updatePassword(updatePasswordVo);
        return R.success().message("Reset password success");
    }

    @Operation(summary = "Upload avatar, the URL of avatar uploaded will be returned")
    @PostMapping("avatar")
    public R uploadAvatar(HttpServletRequest request, MultipartFile file) {
        String userId = (String) request.getAttribute("userId");
        return R.success().message("Upload avatar success").data("avatar", userService.uploadAvatar(userId, file));
    }
}
